// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	models "github.com/gpabois/cougnat/auth/models"
	mock "github.com/stretchr/testify/mock"

	result "github.com/gpabois/cougnat/core/result"
)

// AuthorizationService is an autogenerated mock type for the AuthorizationService type
type AuthorizationService struct {
	mock.Mock
}

type AuthorizationService_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthorizationService) EXPECT() *AuthorizationService_Expecter {
	return &AuthorizationService_Expecter{mock: &_m.Mock}
}

// AddPermission provides a mock function with given fields: actorID, perm, object
func (_m *AuthorizationService) AddPermission(actorID models.ActorID, perm string, object models.ObjectID) result.Result[bool] {
	ret := _m.Called(actorID, perm, object)

	var r0 result.Result[bool]
	if rf, ok := ret.Get(0).(func(models.ActorID, string, models.ObjectID) result.Result[bool]); ok {
		r0 = rf(actorID, perm, object)
	} else {
		r0 = ret.Get(0).(result.Result[bool])
	}

	return r0
}

// AuthorizationService_AddPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPermission'
type AuthorizationService_AddPermission_Call struct {
	*mock.Call
}

// AddPermission is a helper method to define mock.On call
//   - actorID models.ActorID
//   - perm string
//   - object models.ObjectID
func (_e *AuthorizationService_Expecter) AddPermission(actorID interface{}, perm interface{}, object interface{}) *AuthorizationService_AddPermission_Call {
	return &AuthorizationService_AddPermission_Call{Call: _e.mock.On("AddPermission", actorID, perm, object)}
}

func (_c *AuthorizationService_AddPermission_Call) Run(run func(actorID models.ActorID, perm string, object models.ObjectID)) *AuthorizationService_AddPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.ActorID), args[1].(string), args[2].(models.ObjectID))
	})
	return _c
}

func (_c *AuthorizationService_AddPermission_Call) Return(_a0 result.Result[bool]) *AuthorizationService_AddPermission_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthorizationService_AddPermission_Call) RunAndReturn(run func(models.ActorID, string, models.ObjectID) result.Result[bool]) *AuthorizationService_AddPermission_Call {
	_c.Call.Return(run)
	return _c
}

// AddPermissions provides a mock function with given fields: actorID, perms, object
func (_m *AuthorizationService) AddPermissions(actorID models.ActorID, perms []string, object models.ObjectID) result.Result[bool] {
	ret := _m.Called(actorID, perms, object)

	var r0 result.Result[bool]
	if rf, ok := ret.Get(0).(func(models.ActorID, []string, models.ObjectID) result.Result[bool]); ok {
		r0 = rf(actorID, perms, object)
	} else {
		r0 = ret.Get(0).(result.Result[bool])
	}

	return r0
}

// AuthorizationService_AddPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPermissions'
type AuthorizationService_AddPermissions_Call struct {
	*mock.Call
}

// AddPermissions is a helper method to define mock.On call
//   - actorID models.ActorID
//   - perms []string
//   - object models.ObjectID
func (_e *AuthorizationService_Expecter) AddPermissions(actorID interface{}, perms interface{}, object interface{}) *AuthorizationService_AddPermissions_Call {
	return &AuthorizationService_AddPermissions_Call{Call: _e.mock.On("AddPermissions", actorID, perms, object)}
}

func (_c *AuthorizationService_AddPermissions_Call) Run(run func(actorID models.ActorID, perms []string, object models.ObjectID)) *AuthorizationService_AddPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.ActorID), args[1].([]string), args[2].(models.ObjectID))
	})
	return _c
}

func (_c *AuthorizationService_AddPermissions_Call) Return(_a0 result.Result[bool]) *AuthorizationService_AddPermissions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthorizationService_AddPermissions_Call) RunAndReturn(run func(models.ActorID, []string, models.ObjectID) result.Result[bool]) *AuthorizationService_AddPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// HasPermission provides a mock function with given fields: actorID, perm, object
func (_m *AuthorizationService) HasPermission(actorID models.ActorID, perm string, object models.ObjectID) result.Result[bool] {
	ret := _m.Called(actorID, perm, object)

	var r0 result.Result[bool]
	if rf, ok := ret.Get(0).(func(models.ActorID, string, models.ObjectID) result.Result[bool]); ok {
		r0 = rf(actorID, perm, object)
	} else {
		r0 = ret.Get(0).(result.Result[bool])
	}

	return r0
}

// AuthorizationService_HasPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasPermission'
type AuthorizationService_HasPermission_Call struct {
	*mock.Call
}

// HasPermission is a helper method to define mock.On call
//   - actorID models.ActorID
//   - perm string
//   - object models.ObjectID
func (_e *AuthorizationService_Expecter) HasPermission(actorID interface{}, perm interface{}, object interface{}) *AuthorizationService_HasPermission_Call {
	return &AuthorizationService_HasPermission_Call{Call: _e.mock.On("HasPermission", actorID, perm, object)}
}

func (_c *AuthorizationService_HasPermission_Call) Run(run func(actorID models.ActorID, perm string, object models.ObjectID)) *AuthorizationService_HasPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.ActorID), args[1].(string), args[2].(models.ObjectID))
	})
	return _c
}

func (_c *AuthorizationService_HasPermission_Call) Return(_a0 result.Result[bool]) *AuthorizationService_HasPermission_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthorizationService_HasPermission_Call) RunAndReturn(run func(models.ActorID, string, models.ObjectID) result.Result[bool]) *AuthorizationService_HasPermission_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePermission provides a mock function with given fields: actorID, perm, object
func (_m *AuthorizationService) RemovePermission(actorID models.ActorID, perm string, object models.ObjectID) result.Result[bool] {
	ret := _m.Called(actorID, perm, object)

	var r0 result.Result[bool]
	if rf, ok := ret.Get(0).(func(models.ActorID, string, models.ObjectID) result.Result[bool]); ok {
		r0 = rf(actorID, perm, object)
	} else {
		r0 = ret.Get(0).(result.Result[bool])
	}

	return r0
}

// AuthorizationService_RemovePermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePermission'
type AuthorizationService_RemovePermission_Call struct {
	*mock.Call
}

// RemovePermission is a helper method to define mock.On call
//   - actorID models.ActorID
//   - perm string
//   - object models.ObjectID
func (_e *AuthorizationService_Expecter) RemovePermission(actorID interface{}, perm interface{}, object interface{}) *AuthorizationService_RemovePermission_Call {
	return &AuthorizationService_RemovePermission_Call{Call: _e.mock.On("RemovePermission", actorID, perm, object)}
}

func (_c *AuthorizationService_RemovePermission_Call) Run(run func(actorID models.ActorID, perm string, object models.ObjectID)) *AuthorizationService_RemovePermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.ActorID), args[1].(string), args[2].(models.ObjectID))
	})
	return _c
}

func (_c *AuthorizationService_RemovePermission_Call) Return(_a0 result.Result[bool]) *AuthorizationService_RemovePermission_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthorizationService_RemovePermission_Call) RunAndReturn(run func(models.ActorID, string, models.ObjectID) result.Result[bool]) *AuthorizationService_RemovePermission_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePermissions provides a mock function with given fields: actorID, perms, object
func (_m *AuthorizationService) RemovePermissions(actorID models.ActorID, perms []string, object models.ObjectID) result.Result[bool] {
	ret := _m.Called(actorID, perms, object)

	var r0 result.Result[bool]
	if rf, ok := ret.Get(0).(func(models.ActorID, []string, models.ObjectID) result.Result[bool]); ok {
		r0 = rf(actorID, perms, object)
	} else {
		r0 = ret.Get(0).(result.Result[bool])
	}

	return r0
}

// AuthorizationService_RemovePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePermissions'
type AuthorizationService_RemovePermissions_Call struct {
	*mock.Call
}

// RemovePermissions is a helper method to define mock.On call
//   - actorID models.ActorID
//   - perms []string
//   - object models.ObjectID
func (_e *AuthorizationService_Expecter) RemovePermissions(actorID interface{}, perms interface{}, object interface{}) *AuthorizationService_RemovePermissions_Call {
	return &AuthorizationService_RemovePermissions_Call{Call: _e.mock.On("RemovePermissions", actorID, perms, object)}
}

func (_c *AuthorizationService_RemovePermissions_Call) Run(run func(actorID models.ActorID, perms []string, object models.ObjectID)) *AuthorizationService_RemovePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.ActorID), args[1].([]string), args[2].(models.ObjectID))
	})
	return _c
}

func (_c *AuthorizationService_RemovePermissions_Call) Return(_a0 result.Result[bool]) *AuthorizationService_RemovePermissions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthorizationService_RemovePermissions_Call) RunAndReturn(run func(models.ActorID, []string, models.ObjectID) result.Result[bool]) *AuthorizationService_RemovePermissions_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewAuthorizationService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthorizationService creates a new instance of AuthorizationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthorizationService(t mockConstructorTestingTNewAuthorizationService) *AuthorizationService {
	mock := &AuthorizationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
