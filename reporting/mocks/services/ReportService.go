// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/gpabois/cougnat/reporting/models"
	mock "github.com/stretchr/testify/mock"

	result "github.com/gpabois/cougnat/core/result"
)

// ReportService is an autogenerated mock type for the ReportService type
type ReportService struct {
	mock.Mock
}

type ReportService_Expecter struct {
	mock *mock.Mock
}

func (_m *ReportService) EXPECT() *ReportService_Expecter {
	return &ReportService_Expecter{mock: &_m.Mock}
}

// DeleteReport provides a mock function with given fields: ctx, reportID
func (_m *ReportService) DeleteReport(ctx context.Context, reportID string) result.Result[bool] {
	ret := _m.Called(ctx, reportID)

	var r0 result.Result[bool]
	if rf, ok := ret.Get(0).(func(context.Context, string) result.Result[bool]); ok {
		r0 = rf(ctx, reportID)
	} else {
		r0 = ret.Get(0).(result.Result[bool])
	}

	return r0
}

// ReportService_DeleteReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReport'
type ReportService_DeleteReport_Call struct {
	*mock.Call
}

// DeleteReport is a helper method to define mock.On call
//   - ctx context.Context
//   - reportID string
func (_e *ReportService_Expecter) DeleteReport(ctx interface{}, reportID interface{}) *ReportService_DeleteReport_Call {
	return &ReportService_DeleteReport_Call{Call: _e.mock.On("DeleteReport", ctx, reportID)}
}

func (_c *ReportService_DeleteReport_Call) Run(run func(ctx context.Context, reportID string)) *ReportService_DeleteReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ReportService_DeleteReport_Call) Return(_a0 result.Result[bool]) *ReportService_DeleteReport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReportService_DeleteReport_Call) RunAndReturn(run func(context.Context, string) result.Result[bool]) *ReportService_DeleteReport_Call {
	_c.Call.Return(run)
	return _c
}

// Report provides a mock function with given fields: ctx, report
func (_m *ReportService) Report(ctx context.Context, report models.Report) result.Result[models.Report] {
	ret := _m.Called(ctx, report)

	var r0 result.Result[models.Report]
	if rf, ok := ret.Get(0).(func(context.Context, models.Report) result.Result[models.Report]); ok {
		r0 = rf(ctx, report)
	} else {
		r0 = ret.Get(0).(result.Result[models.Report])
	}

	return r0
}

// ReportService_Report_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Report'
type ReportService_Report_Call struct {
	*mock.Call
}

// Report is a helper method to define mock.On call
//   - ctx context.Context
//   - report models.Report
func (_e *ReportService_Expecter) Report(ctx interface{}, report interface{}) *ReportService_Report_Call {
	return &ReportService_Report_Call{Call: _e.mock.On("Report", ctx, report)}
}

func (_c *ReportService_Report_Call) Run(run func(ctx context.Context, report models.Report)) *ReportService_Report_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Report))
	})
	return _c
}

func (_c *ReportService_Report_Call) Return(_a0 result.Result[models.Report]) *ReportService_Report_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReportService_Report_Call) RunAndReturn(run func(context.Context, models.Report) result.Result[models.Report]) *ReportService_Report_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewReportService interface {
	mock.TestingT
	Cleanup(func())
}

// NewReportService creates a new instance of ReportService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReportService(t mockConstructorTestingTNewReportService) *ReportService {
	mock := &ReportService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
