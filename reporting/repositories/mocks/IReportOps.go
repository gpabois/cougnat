// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	option "github.com/gpabois/gostd/option"
	mock "github.com/stretchr/testify/mock"

	reporting_models "github.com/gpabois/cougnat/reporting/models"

	result "github.com/gpabois/gostd/result"
)

// IReportOps is an autogenerated mock type for the IReportOps type
type IReportOps struct {
	mock.Mock
}

type IReportOps_Expecter struct {
	mock *mock.Mock
}

func (_m *IReportOps) EXPECT() *IReportOps_Expecter {
	return &IReportOps_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: report
func (_m *IReportOps) Create(report reporting_models.NewReport) result.Result[int] {
	ret := _m.Called(report)

	var r0 result.Result[int]
	if rf, ok := ret.Get(0).(func(reporting_models.NewReport) result.Result[int]); ok {
		r0 = rf(report)
	} else {
		r0 = ret.Get(0).(result.Result[int])
	}

	return r0
}

// IReportOps_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type IReportOps_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - report reporting_models.NewReport
func (_e *IReportOps_Expecter) Create(report interface{}) *IReportOps_Create_Call {
	return &IReportOps_Create_Call{Call: _e.mock.On("Create", report)}
}

func (_c *IReportOps_Create_Call) Run(run func(report reporting_models.NewReport)) *IReportOps_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(reporting_models.NewReport))
	})
	return _c
}

func (_c *IReportOps_Create_Call) Return(_a0 result.Result[int]) *IReportOps_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IReportOps_Create_Call) RunAndReturn(run func(reporting_models.NewReport) result.Result[int]) *IReportOps_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: reportID
func (_m *IReportOps) Delete(reportID int) result.Result[bool] {
	ret := _m.Called(reportID)

	var r0 result.Result[bool]
	if rf, ok := ret.Get(0).(func(int) result.Result[bool]); ok {
		r0 = rf(reportID)
	} else {
		r0 = ret.Get(0).(result.Result[bool])
	}

	return r0
}

// IReportOps_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type IReportOps_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - reportID int
func (_e *IReportOps_Expecter) Delete(reportID interface{}) *IReportOps_Delete_Call {
	return &IReportOps_Delete_Call{Call: _e.mock.On("Delete", reportID)}
}

func (_c *IReportOps_Delete_Call) Run(run func(reportID int)) *IReportOps_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IReportOps_Delete_Call) Return(_a0 result.Result[bool]) *IReportOps_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IReportOps_Delete_Call) RunAndReturn(run func(int) result.Result[bool]) *IReportOps_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: id
func (_m *IReportOps) GetById(id int) result.Result[option.Option[reporting_models.Report]] {
	ret := _m.Called(id)

	var r0 result.Result[option.Option[reporting_models.Report]]
	if rf, ok := ret.Get(0).(func(int) result.Result[option.Option[reporting_models.Report]]); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(result.Result[option.Option[reporting_models.Report]])
	}

	return r0
}

// IReportOps_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type IReportOps_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id int
func (_e *IReportOps_Expecter) GetById(id interface{}) *IReportOps_GetById_Call {
	return &IReportOps_GetById_Call{Call: _e.mock.On("GetById", id)}
}

func (_c *IReportOps_GetById_Call) Run(run func(id int)) *IReportOps_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IReportOps_GetById_Call) Return(_a0 result.Result[option.Option[reporting_models.Report]]) *IReportOps_GetById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IReportOps_GetById_Call) RunAndReturn(run func(int) result.Result[option.Option[reporting_models.Report]]) *IReportOps_GetById_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIReportOps interface {
	mock.TestingT
	Cleanup(func())
}

// NewIReportOps creates a new instance of IReportOps. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIReportOps(t mockConstructorTestingTNewIReportOps) *IReportOps {
	mock := &IReportOps{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
