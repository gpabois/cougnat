// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	reporting_repositories "github.com/gpabois/cougnat/reporting/repositories"
	result "github.com/gpabois/gostd/result"
	mock "github.com/stretchr/testify/mock"
)

// IRepositoriesTx is an autogenerated mock type for the IRepositoriesTx type
type IRepositoriesTx struct {
	mock.Mock
}

type IRepositoriesTx_Expecter struct {
	mock *mock.Mock
}

func (_m *IRepositoriesTx) EXPECT() *IRepositoriesTx_Expecter {
	return &IRepositoriesTx_Expecter{mock: &_m.Mock}
}

// Commit provides a mock function with given fields:
func (_m *IRepositoriesTx) Commit() result.Result[bool] {
	ret := _m.Called()

	var r0 result.Result[bool]
	if rf, ok := ret.Get(0).(func() result.Result[bool]); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(result.Result[bool])
	}

	return r0
}

// IRepositoriesTx_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type IRepositoriesTx_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *IRepositoriesTx_Expecter) Commit() *IRepositoriesTx_Commit_Call {
	return &IRepositoriesTx_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *IRepositoriesTx_Commit_Call) Run(run func()) *IRepositoriesTx_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IRepositoriesTx_Commit_Call) Return(_a0 result.Result[bool]) *IRepositoriesTx_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IRepositoriesTx_Commit_Call) RunAndReturn(run func() result.Result[bool]) *IRepositoriesTx_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Report provides a mock function with given fields:
func (_m *IRepositoriesTx) Report() reporting_repositories.IReportRepository {
	ret := _m.Called()

	var r0 reporting_repositories.IReportRepository
	if rf, ok := ret.Get(0).(func() reporting_repositories.IReportRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(reporting_repositories.IReportRepository)
		}
	}

	return r0
}

// IRepositoriesTx_Report_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Report'
type IRepositoriesTx_Report_Call struct {
	*mock.Call
}

// Report is a helper method to define mock.On call
func (_e *IRepositoriesTx_Expecter) Report() *IRepositoriesTx_Report_Call {
	return &IRepositoriesTx_Report_Call{Call: _e.mock.On("Report")}
}

func (_c *IRepositoriesTx_Report_Call) Run(run func()) *IRepositoriesTx_Report_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IRepositoriesTx_Report_Call) Return(_a0 reporting_repositories.IReportRepository) *IRepositoriesTx_Report_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IRepositoriesTx_Report_Call) RunAndReturn(run func() reporting_repositories.IReportRepository) *IRepositoriesTx_Report_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with given fields:
func (_m *IRepositoriesTx) Rollback() result.Result[bool] {
	ret := _m.Called()

	var r0 result.Result[bool]
	if rf, ok := ret.Get(0).(func() result.Result[bool]); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(result.Result[bool])
	}

	return r0
}

// IRepositoriesTx_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type IRepositoriesTx_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
func (_e *IRepositoriesTx_Expecter) Rollback() *IRepositoriesTx_Rollback_Call {
	return &IRepositoriesTx_Rollback_Call{Call: _e.mock.On("Rollback")}
}

func (_c *IRepositoriesTx_Rollback_Call) Run(run func()) *IRepositoriesTx_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IRepositoriesTx_Rollback_Call) Return(_a0 result.Result[bool]) *IRepositoriesTx_Rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IRepositoriesTx_Rollback_Call) RunAndReturn(run func() result.Result[bool]) *IRepositoriesTx_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIRepositoriesTx interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepositoriesTx creates a new instance of IRepositoriesTx. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepositoriesTx(t mockConstructorTestingTNewIRepositoriesTx) *IRepositoriesTx {
	mock := &IRepositoriesTx{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
