// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	models "github.com/gpabois/cougnat/reporting/models"
	mock "github.com/stretchr/testify/mock"

	option "github.com/gpabois/cougnat/core/option"

	result "github.com/gpabois/cougnat/core/result"
)

// IReportRepository is an autogenerated mock type for the IReportRepository type
type IReportRepository struct {
	mock.Mock
}

type IReportRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IReportRepository) EXPECT() *IReportRepository_Expecter {
	return &IReportRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: report
func (_m *IReportRepository) Create(report models.Report) result.Result[string] {
	ret := _m.Called(report)

	var r0 result.Result[string]
	if rf, ok := ret.Get(0).(func(models.Report) result.Result[string]); ok {
		r0 = rf(report)
	} else {
		r0 = ret.Get(0).(result.Result[string])
	}

	return r0
}

// IReportRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type IReportRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - report models.Report
func (_e *IReportRepository_Expecter) Create(report interface{}) *IReportRepository_Create_Call {
	return &IReportRepository_Create_Call{Call: _e.mock.On("Create", report)}
}

func (_c *IReportRepository_Create_Call) Run(run func(report models.Report)) *IReportRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Report))
	})
	return _c
}

func (_c *IReportRepository_Create_Call) Return(_a0 result.Result[string]) *IReportRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IReportRepository_Create_Call) RunAndReturn(run func(models.Report) result.Result[string]) *IReportRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: reportID
func (_m *IReportRepository) Delete(reportID string) result.Result[bool] {
	ret := _m.Called(reportID)

	var r0 result.Result[bool]
	if rf, ok := ret.Get(0).(func(string) result.Result[bool]); ok {
		r0 = rf(reportID)
	} else {
		r0 = ret.Get(0).(result.Result[bool])
	}

	return r0
}

// IReportRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type IReportRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - reportID string
func (_e *IReportRepository_Expecter) Delete(reportID interface{}) *IReportRepository_Delete_Call {
	return &IReportRepository_Delete_Call{Call: _e.mock.On("Delete", reportID)}
}

func (_c *IReportRepository_Delete_Call) Run(run func(reportID string)) *IReportRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IReportRepository_Delete_Call) Return(_a0 result.Result[bool]) *IReportRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IReportRepository_Delete_Call) RunAndReturn(run func(string) result.Result[bool]) *IReportRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: id
func (_m *IReportRepository) GetById(id string) result.Result[option.Option[models.Report]] {
	ret := _m.Called(id)

	var r0 result.Result[option.Option[models.Report]]
	if rf, ok := ret.Get(0).(func(string) result.Result[option.Option[models.Report]]); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(result.Result[option.Option[models.Report]])
	}

	return r0
}

// IReportRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type IReportRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id string
func (_e *IReportRepository_Expecter) GetById(id interface{}) *IReportRepository_GetById_Call {
	return &IReportRepository_GetById_Call{Call: _e.mock.On("GetById", id)}
}

func (_c *IReportRepository_GetById_Call) Run(run func(id string)) *IReportRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IReportRepository_GetById_Call) Return(_a0 result.Result[option.Option[models.Report]]) *IReportRepository_GetById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IReportRepository_GetById_Call) RunAndReturn(run func(string) result.Result[option.Option[models.Report]]) *IReportRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIReportRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIReportRepository creates a new instance of IReportRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIReportRepository(t mockConstructorTestingTNewIReportRepository) *IReportRepository {
	mock := &IReportRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
