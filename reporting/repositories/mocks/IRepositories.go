// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	reporting_repositories "github.com/gpabois/cougnat/reporting/repositories"
	result "github.com/gpabois/gostd/result"
	mock "github.com/stretchr/testify/mock"
)

// IRepositories is an autogenerated mock type for the IRepositories type
type IRepositories struct {
	mock.Mock
}

type IRepositories_Expecter struct {
	mock *mock.Mock
}

func (_m *IRepositories) EXPECT() *IRepositories_Expecter {
	return &IRepositories_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function with given fields:
func (_m *IRepositories) Begin() result.Result[reporting_repositories.IRepositoriesTx] {
	ret := _m.Called()

	var r0 result.Result[reporting_repositories.IRepositoriesTx]
	if rf, ok := ret.Get(0).(func() result.Result[reporting_repositories.IRepositoriesTx]); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(result.Result[reporting_repositories.IRepositoriesTx])
	}

	return r0
}

// IRepositories_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type IRepositories_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
func (_e *IRepositories_Expecter) Begin() *IRepositories_Begin_Call {
	return &IRepositories_Begin_Call{Call: _e.mock.On("Begin")}
}

func (_c *IRepositories_Begin_Call) Run(run func()) *IRepositories_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IRepositories_Begin_Call) Return(_a0 result.Result[reporting_repositories.IRepositoriesTx]) *IRepositories_Begin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IRepositories_Begin_Call) RunAndReturn(run func() result.Result[reporting_repositories.IRepositoriesTx]) *IRepositories_Begin_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIRepositories interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepositories creates a new instance of IRepositories. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepositories(t mockConstructorTestingTNewIRepositories) *IRepositories {
	mock := &IRepositories{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
