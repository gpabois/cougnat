// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	option "github.com/gpabois/gostd/option"
	mock "github.com/stretchr/testify/mock"

	reporting_models "github.com/gpabois/cougnat/reporting/models"

	result "github.com/gpabois/gostd/result"
)

// IReportRepositoryTx is an autogenerated mock type for the IReportRepositoryTx type
type IReportRepositoryTx struct {
	mock.Mock
}

type IReportRepositoryTx_Expecter struct {
	mock *mock.Mock
}

func (_m *IReportRepositoryTx) EXPECT() *IReportRepositoryTx_Expecter {
	return &IReportRepositoryTx_Expecter{mock: &_m.Mock}
}

// Commit provides a mock function with given fields:
func (_m *IReportRepositoryTx) Commit() result.Result[bool] {
	ret := _m.Called()

	var r0 result.Result[bool]
	if rf, ok := ret.Get(0).(func() result.Result[bool]); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(result.Result[bool])
	}

	return r0
}

// IReportRepositoryTx_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type IReportRepositoryTx_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *IReportRepositoryTx_Expecter) Commit() *IReportRepositoryTx_Commit_Call {
	return &IReportRepositoryTx_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *IReportRepositoryTx_Commit_Call) Run(run func()) *IReportRepositoryTx_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IReportRepositoryTx_Commit_Call) Return(_a0 result.Result[bool]) *IReportRepositoryTx_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IReportRepositoryTx_Commit_Call) RunAndReturn(run func() result.Result[bool]) *IReportRepositoryTx_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: report
func (_m *IReportRepositoryTx) Create(report reporting_models.NewReport) result.Result[int] {
	ret := _m.Called(report)

	var r0 result.Result[int]
	if rf, ok := ret.Get(0).(func(reporting_models.NewReport) result.Result[int]); ok {
		r0 = rf(report)
	} else {
		r0 = ret.Get(0).(result.Result[int])
	}

	return r0
}

// IReportRepositoryTx_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type IReportRepositoryTx_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - report reporting_models.NewReport
func (_e *IReportRepositoryTx_Expecter) Create(report interface{}) *IReportRepositoryTx_Create_Call {
	return &IReportRepositoryTx_Create_Call{Call: _e.mock.On("Create", report)}
}

func (_c *IReportRepositoryTx_Create_Call) Run(run func(report reporting_models.NewReport)) *IReportRepositoryTx_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(reporting_models.NewReport))
	})
	return _c
}

func (_c *IReportRepositoryTx_Create_Call) Return(_a0 result.Result[int]) *IReportRepositoryTx_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IReportRepositoryTx_Create_Call) RunAndReturn(run func(reporting_models.NewReport) result.Result[int]) *IReportRepositoryTx_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: reportID
func (_m *IReportRepositoryTx) Delete(reportID int) result.Result[bool] {
	ret := _m.Called(reportID)

	var r0 result.Result[bool]
	if rf, ok := ret.Get(0).(func(int) result.Result[bool]); ok {
		r0 = rf(reportID)
	} else {
		r0 = ret.Get(0).(result.Result[bool])
	}

	return r0
}

// IReportRepositoryTx_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type IReportRepositoryTx_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - reportID int
func (_e *IReportRepositoryTx_Expecter) Delete(reportID interface{}) *IReportRepositoryTx_Delete_Call {
	return &IReportRepositoryTx_Delete_Call{Call: _e.mock.On("Delete", reportID)}
}

func (_c *IReportRepositoryTx_Delete_Call) Run(run func(reportID int)) *IReportRepositoryTx_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IReportRepositoryTx_Delete_Call) Return(_a0 result.Result[bool]) *IReportRepositoryTx_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IReportRepositoryTx_Delete_Call) RunAndReturn(run func(int) result.Result[bool]) *IReportRepositoryTx_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: id
func (_m *IReportRepositoryTx) GetById(id int) result.Result[option.Option[reporting_models.Report]] {
	ret := _m.Called(id)

	var r0 result.Result[option.Option[reporting_models.Report]]
	if rf, ok := ret.Get(0).(func(int) result.Result[option.Option[reporting_models.Report]]); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(result.Result[option.Option[reporting_models.Report]])
	}

	return r0
}

// IReportRepositoryTx_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type IReportRepositoryTx_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id int
func (_e *IReportRepositoryTx_Expecter) GetById(id interface{}) *IReportRepositoryTx_GetById_Call {
	return &IReportRepositoryTx_GetById_Call{Call: _e.mock.On("GetById", id)}
}

func (_c *IReportRepositoryTx_GetById_Call) Run(run func(id int)) *IReportRepositoryTx_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IReportRepositoryTx_GetById_Call) Return(_a0 result.Result[option.Option[reporting_models.Report]]) *IReportRepositoryTx_GetById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IReportRepositoryTx_GetById_Call) RunAndReturn(run func(int) result.Result[option.Option[reporting_models.Report]]) *IReportRepositoryTx_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// IsManaged provides a mock function with given fields:
func (_m *IReportRepositoryTx) IsManaged() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IReportRepositoryTx_IsManaged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsManaged'
type IReportRepositoryTx_IsManaged_Call struct {
	*mock.Call
}

// IsManaged is a helper method to define mock.On call
func (_e *IReportRepositoryTx_Expecter) IsManaged() *IReportRepositoryTx_IsManaged_Call {
	return &IReportRepositoryTx_IsManaged_Call{Call: _e.mock.On("IsManaged")}
}

func (_c *IReportRepositoryTx_IsManaged_Call) Run(run func()) *IReportRepositoryTx_IsManaged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IReportRepositoryTx_IsManaged_Call) Return(_a0 bool) *IReportRepositoryTx_IsManaged_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IReportRepositoryTx_IsManaged_Call) RunAndReturn(run func() bool) *IReportRepositoryTx_IsManaged_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with given fields:
func (_m *IReportRepositoryTx) Rollback() result.Result[bool] {
	ret := _m.Called()

	var r0 result.Result[bool]
	if rf, ok := ret.Get(0).(func() result.Result[bool]); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(result.Result[bool])
	}

	return r0
}

// IReportRepositoryTx_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type IReportRepositoryTx_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
func (_e *IReportRepositoryTx_Expecter) Rollback() *IReportRepositoryTx_Rollback_Call {
	return &IReportRepositoryTx_Rollback_Call{Call: _e.mock.On("Rollback")}
}

func (_c *IReportRepositoryTx_Rollback_Call) Run(run func()) *IReportRepositoryTx_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IReportRepositoryTx_Rollback_Call) Return(_a0 result.Result[bool]) *IReportRepositoryTx_Rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IReportRepositoryTx_Rollback_Call) RunAndReturn(run func() result.Result[bool]) *IReportRepositoryTx_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIReportRepositoryTx interface {
	mock.TestingT
	Cleanup(func())
}

// NewIReportRepositoryTx creates a new instance of IReportRepositoryTx. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIReportRepositoryTx(t mockConstructorTestingTNewIReportRepositoryTx) *IReportRepositoryTx {
	mock := &IReportRepositoryTx{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
