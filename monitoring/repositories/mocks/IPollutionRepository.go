// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	models "github.com/gpabois/cougnat/monitoring/models"
	mock "github.com/stretchr/testify/mock"

	ops "github.com/gpabois/cougnat/core/ops"

	reportingmodels "github.com/gpabois/cougnat/reporting/models"

	repositories "github.com/gpabois/cougnat/monitoring/repositories"

	result "github.com/gpabois/cougnat/core/result"

	slippy_map "github.com/gpabois/cougnat/core/slippy-map"
)

// IPollutionRepository is an autogenerated mock type for the IPollutionRepository type
type IPollutionRepository struct {
	mock.Mock
}

type IPollutionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IPollutionRepository) EXPECT() *IPollutionRepository_Expecter {
	return &IPollutionRepository_Expecter{mock: &_m.Mock}
}

// DecPollutionTileMany provides a mock function with given fields: index, reportType
func (_m *IPollutionRepository) DecPollutionTileMany(index models.TimeTileIndex, reportType reportingmodels.ReportType) result.Result[bool] {
	ret := _m.Called(index, reportType)

	var r0 result.Result[bool]
	if rf, ok := ret.Get(0).(func(models.TimeTileIndex, reportingmodels.ReportType) result.Result[bool]); ok {
		r0 = rf(index, reportType)
	} else {
		r0 = ret.Get(0).(result.Result[bool])
	}

	return r0
}

// IPollutionRepository_DecPollutionTileMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecPollutionTileMany'
type IPollutionRepository_DecPollutionTileMany_Call struct {
	*mock.Call
}

// DecPollutionTileMany is a helper method to define mock.On call
//   - index models.TimeTileIndex
//   - reportType reportingmodels.ReportType
func (_e *IPollutionRepository_Expecter) DecPollutionTileMany(index interface{}, reportType interface{}) *IPollutionRepository_DecPollutionTileMany_Call {
	return &IPollutionRepository_DecPollutionTileMany_Call{Call: _e.mock.On("DecPollutionTileMany", index, reportType)}
}

func (_c *IPollutionRepository_DecPollutionTileMany_Call) Run(run func(index models.TimeTileIndex, reportType reportingmodels.ReportType)) *IPollutionRepository_DecPollutionTileMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.TimeTileIndex), args[1].(reportingmodels.ReportType))
	})
	return _c
}

func (_c *IPollutionRepository_DecPollutionTileMany_Call) Return(_a0 result.Result[bool]) *IPollutionRepository_DecPollutionTileMany_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IPollutionRepository_DecPollutionTileMany_Call) RunAndReturn(run func(models.TimeTileIndex, reportingmodels.ReportType) result.Result[bool]) *IPollutionRepository_DecPollutionTileMany_Call {
	_c.Call.Return(run)
	return _c
}

// GetPollutionTiles provides a mock function with given fields: tileBounds, timeBounds
func (_m *IPollutionRepository) GetPollutionTiles(tileBounds slippy_map.TileBounds, timeBounds ops.Interval[int]) result.Result[models.PollutionTileCollection] {
	ret := _m.Called(tileBounds, timeBounds)

	var r0 result.Result[models.PollutionTileCollection]
	if rf, ok := ret.Get(0).(func(slippy_map.TileBounds, ops.Interval[int]) result.Result[models.PollutionTileCollection]); ok {
		r0 = rf(tileBounds, timeBounds)
	} else {
		r0 = ret.Get(0).(result.Result[models.PollutionTileCollection])
	}

	return r0
}

// IPollutionRepository_GetPollutionTiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPollutionTiles'
type IPollutionRepository_GetPollutionTiles_Call struct {
	*mock.Call
}

// GetPollutionTiles is a helper method to define mock.On call
//   - tileBounds slippy_map.TileBounds
//   - timeBounds ops.Interval[int]
func (_e *IPollutionRepository_Expecter) GetPollutionTiles(tileBounds interface{}, timeBounds interface{}) *IPollutionRepository_GetPollutionTiles_Call {
	return &IPollutionRepository_GetPollutionTiles_Call{Call: _e.mock.On("GetPollutionTiles", tileBounds, timeBounds)}
}

func (_c *IPollutionRepository_GetPollutionTiles_Call) Run(run func(tileBounds slippy_map.TileBounds, timeBounds ops.Interval[int])) *IPollutionRepository_GetPollutionTiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(slippy_map.TileBounds), args[1].(ops.Interval[int]))
	})
	return _c
}

func (_c *IPollutionRepository_GetPollutionTiles_Call) Return(_a0 result.Result[models.PollutionTileCollection]) *IPollutionRepository_GetPollutionTiles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IPollutionRepository_GetPollutionTiles_Call) RunAndReturn(run func(slippy_map.TileBounds, ops.Interval[int]) result.Result[models.PollutionTileCollection]) *IPollutionRepository_GetPollutionTiles_Call {
	_c.Call.Return(run)
	return _c
}

// IncPollutionTileMany provides a mock function with given fields: commands
func (_m *IPollutionRepository) IncPollutionTileMany(commands []repositories.IncPollutionCommand) result.Result[bool] {
	ret := _m.Called(commands)

	var r0 result.Result[bool]
	if rf, ok := ret.Get(0).(func([]repositories.IncPollutionCommand) result.Result[bool]); ok {
		r0 = rf(commands)
	} else {
		r0 = ret.Get(0).(result.Result[bool])
	}

	return r0
}

// IPollutionRepository_IncPollutionTileMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncPollutionTileMany'
type IPollutionRepository_IncPollutionTileMany_Call struct {
	*mock.Call
}

// IncPollutionTileMany is a helper method to define mock.On call
//   - commands []repositories.IncPollutionCommand
func (_e *IPollutionRepository_Expecter) IncPollutionTileMany(commands interface{}) *IPollutionRepository_IncPollutionTileMany_Call {
	return &IPollutionRepository_IncPollutionTileMany_Call{Call: _e.mock.On("IncPollutionTileMany", commands)}
}

func (_c *IPollutionRepository_IncPollutionTileMany_Call) Run(run func(commands []repositories.IncPollutionCommand)) *IPollutionRepository_IncPollutionTileMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]repositories.IncPollutionCommand))
	})
	return _c
}

func (_c *IPollutionRepository_IncPollutionTileMany_Call) Return(_a0 result.Result[bool]) *IPollutionRepository_IncPollutionTileMany_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IPollutionRepository_IncPollutionTileMany_Call) RunAndReturn(run func([]repositories.IncPollutionCommand) result.Result[bool]) *IPollutionRepository_IncPollutionTileMany_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIPollutionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIPollutionRepository creates a new instance of IPollutionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPollutionRepository(t mockConstructorTestingTNewIPollutionRepository) *IPollutionRepository {
	mock := &IPollutionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
