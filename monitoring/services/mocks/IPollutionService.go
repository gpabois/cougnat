// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	result "github.com/gpabois/cougnat/core/result"
	mock "github.com/stretchr/testify/mock"

	services "github.com/gpabois/cougnat/monitoring/services"
)

// IPollutionService is an autogenerated mock type for the IPollutionService type
type IPollutionService struct {
	mock.Mock
}

type IPollutionService_Expecter struct {
	mock *mock.Mock
}

func (_m *IPollutionService) EXPECT() *IPollutionService_Expecter {
	return &IPollutionService_Expecter{mock: &_m.Mock}
}

// GetTile provides a mock function with given fields: ctx, args
func (_m *IPollutionService) GetTile(ctx context.Context, args services.GetTileArgs) result.Result[[]byte] {
	ret := _m.Called(ctx, args)

	var r0 result.Result[[]byte]
	if rf, ok := ret.Get(0).(func(context.Context, services.GetTileArgs) result.Result[[]byte]); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(result.Result[[]byte])
	}

	return r0
}

// IPollutionService_GetTile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTile'
type IPollutionService_GetTile_Call struct {
	*mock.Call
}

// GetTile is a helper method to define mock.On call
//   - ctx context.Context
//   - args services.GetTileArgs
func (_e *IPollutionService_Expecter) GetTile(ctx interface{}, args interface{}) *IPollutionService_GetTile_Call {
	return &IPollutionService_GetTile_Call{Call: _e.mock.On("GetTile", ctx, args)}
}

func (_c *IPollutionService_GetTile_Call) Run(run func(ctx context.Context, args services.GetTileArgs)) *IPollutionService_GetTile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(services.GetTileArgs))
	})
	return _c
}

func (_c *IPollutionService_GetTile_Call) Return(_a0 result.Result[[]byte]) *IPollutionService_GetTile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IPollutionService_GetTile_Call) RunAndReturn(run func(context.Context, services.GetTileArgs) result.Result[[]byte]) *IPollutionService_GetTile_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIPollutionService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIPollutionService creates a new instance of IPollutionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPollutionService(t mockConstructorTestingTNewIPollutionService) *IPollutionService {
	mock := &IPollutionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
