// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	models "github.com/gpabois/cougnat/monitoring/models"
	mock "github.com/stretchr/testify/mock"

	result "github.com/gpabois/cougnat/core/result"

	time "time"
)

// IPollutionService is an autogenerated mock type for the IPollutionService type
type IPollutionService struct {
	mock.Mock
}

type IPollutionService_Expecter struct {
	mock *mock.Mock
}

func (_m *IPollutionService) EXPECT() *IPollutionService_Expecter {
	return &IPollutionService_Expecter{mock: &_m.Mock}
}

// GetPollutionTiles provides a mock function with given fields: orgID, sectionID, zoom, begin, end
func (_m *IPollutionService) GetPollutionTiles(orgID string, sectionID []string, zoom int, begin time.Time, end time.Time) result.Result[[]models.PolTile] {
	ret := _m.Called(orgID, sectionID, zoom, begin, end)

	var r0 result.Result[[]models.PolTile]
	if rf, ok := ret.Get(0).(func(string, []string, int, time.Time, time.Time) result.Result[[]models.PolTile]); ok {
		r0 = rf(orgID, sectionID, zoom, begin, end)
	} else {
		r0 = ret.Get(0).(result.Result[[]models.PolTile])
	}

	return r0
}

// IPollutionService_GetPollutionTiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPollutionTiles'
type IPollutionService_GetPollutionTiles_Call struct {
	*mock.Call
}

// GetPollutionTiles is a helper method to define mock.On call
//   - orgID string
//   - sectionID []string
//   - zoom int
//   - begin time.Time
//   - end time.Time
func (_e *IPollutionService_Expecter) GetPollutionTiles(orgID interface{}, sectionID interface{}, zoom interface{}, begin interface{}, end interface{}) *IPollutionService_GetPollutionTiles_Call {
	return &IPollutionService_GetPollutionTiles_Call{Call: _e.mock.On("GetPollutionTiles", orgID, sectionID, zoom, begin, end)}
}

func (_c *IPollutionService_GetPollutionTiles_Call) Run(run func(orgID string, sectionID []string, zoom int, begin time.Time, end time.Time)) *IPollutionService_GetPollutionTiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string), args[2].(int), args[3].(time.Time), args[4].(time.Time))
	})
	return _c
}

func (_c *IPollutionService_GetPollutionTiles_Call) Return(_a0 result.Result[[]models.PolTile]) *IPollutionService_GetPollutionTiles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IPollutionService_GetPollutionTiles_Call) RunAndReturn(run func(string, []string, int, time.Time, time.Time) result.Result[[]models.PolTile]) *IPollutionService_GetPollutionTiles_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIPollutionService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIPollutionService creates a new instance of IPollutionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPollutionService(t mockConstructorTestingTNewIPollutionService) *IPollutionService {
	mock := &IPollutionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
