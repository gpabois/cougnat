// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	models "github.com/gpabois/cougnat/monitoring/models"
	mock "github.com/stretchr/testify/mock"
)

// AggregationFunc is an autogenerated mock type for the AggregationFunc type
type AggregationFunc struct {
	mock.Mock
}

type AggregationFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *AggregationFunc) EXPECT() *AggregationFunc_Expecter {
	return &AggregationFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: tiles
func (_m *AggregationFunc) Execute(tiles models.PollutionTileCollection) models.PollutionTile {
	ret := _m.Called(tiles)

	var r0 models.PollutionTile
	if rf, ok := ret.Get(0).(func(models.PollutionTileCollection) models.PollutionTile); ok {
		r0 = rf(tiles)
	} else {
		r0 = ret.Get(0).(models.PollutionTile)
	}

	return r0
}

// AggregationFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type AggregationFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - tiles models.PollutionTileCollection
func (_e *AggregationFunc_Expecter) Execute(tiles interface{}) *AggregationFunc_Execute_Call {
	return &AggregationFunc_Execute_Call{Call: _e.mock.On("Execute", tiles)}
}

func (_c *AggregationFunc_Execute_Call) Run(run func(tiles models.PollutionTileCollection)) *AggregationFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.PollutionTileCollection))
	})
	return _c
}

func (_c *AggregationFunc_Execute_Call) Return(_a0 models.PollutionTile) *AggregationFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AggregationFunc_Execute_Call) RunAndReturn(run func(models.PollutionTileCollection) models.PollutionTile) *AggregationFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewAggregationFunc interface {
	mock.TestingT
	Cleanup(func())
}

// NewAggregationFunc creates a new instance of AggregationFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAggregationFunc(t mockConstructorTestingTNewAggregationFunc) *AggregationFunc {
	mock := &AggregationFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
